#!/usr/bin/env ruby

require 'eventmachine'
require 'optparse'
require 'rubygems'
require 'nats/client'

['TERM', 'INT'].each { |s| trap(s) {  puts; exit! } }

def usage
  puts "Usage: nats-sub <subject> [-s server] [-t]"; exit
end

args = ARGV.dup
opts_parser = OptionParser.new do |opts|
  opts.on('-s SERVER') { |server| $nats_server = server }
  opts.on('-t') { $show_time = true }

end
args = opts_parser.parse!(args)

subject = args.shift
usage unless subject

def time_prefix
  "[#{Time.now}] " if $show_time
end

def header
  $i=0 unless $i
  "#{time_prefix}[\##{$i+=1}]"
end

NATS.on_error do |err|
  puts "Server Error: #{err} #{err.err_obj.inspect}"
  if err.err_obj.nil?
    exit!
  end
end

EM.run do
  NATS.start(:uri => $nats_server, :autostart => true) do
    puts "Listening on [#{subject}]"
    NATS.subscribe(subject) { |msg, _, sub| puts "#{header} Received on [#{sub}] : '#{msg}'" }
  end
  raise 'PEW PEW PEW'
end
